name: ðŸ”– Versioning

on:
  workflow_dispatch:
    inputs:
      hint:
        description: 'Input hint (placeholder) - DO NOT USE THIS INPUT.'
        required: false
        default: 'api / patch'
      bump:
        description: Bump version type (major, minor, patch)
        required: true
      module:
        description: 'Module name (like api, gateway-api, batch..)'
        required: false
      suffix:
        description: Version tag suffix
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
  GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
  GIT_USER_MAIL: ${{ secrets.GIT_USER_MAIL }}
  SUFFIX: ${{ github.event.inputs.suffix }}
  VERSIONING_NODEJS_PACKAGE_JSON: 'false'
  VERSIONING_GRADLE_PACKAGE: 'false'

concurrency:
  group: versioning-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  Versioning:
    name: Versioning (Tag)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get Previous Tag
        id: original
        run: |
          if [[ ! -z "${{ github.event.inputs.module }}" ]]; then
            ORIGINAL=`git describe --abbrev=0 --tags --match "${{ github.event.inputs.module }}-[0-9]**" 2> /dev/null` || true

            if [[ -z "$ORIGINAL" ]]; then
              ORIGINAL="${{ github.event.inputs.module }}-0.0.1"
            fi

            if [[ ! -z "${{ github.event.inputs.suffix }}" ]]; then
              ORIGINAL="$ORIGINAL-${{ github.event.inputs.suffix}}"
            fi

            echo "::set-output name=result::$ORIGINAL"
          else
            ORIGINAL=`git describe --abbrev=0 --tags --match "[0-9]**" 2> /dev/null` || true

            if [[ -z "$ORIGINAL" ]]; then
              ORIGINAL="0.0.1"
            fi

            if [[ ! -z "${{ github.event.inputs.suffix }}" ]]; then
              ORIGINAL="$ORIGINAL-${{ github.event.inputs.suffix}}"
            fi

            echo "::set-output name=result::$ORIGINAL"
          fi

      - name: Generate Version
        id: version
        uses: dshare-inc/actions-semver@1.0.3
        with:
          version: ${{ steps.original.outputs.result }}
          return_with_suffix: false
          return_with_prefix: true
          method: ${{ github.event.inputs.bump }}

      - name: Generate NodeJS Version
        id: version-node
        uses: dshare-inc/actions-semver@1.0.3
        if: ${{ env.VERSIONING_NODEJS_PACKAGE_JSON == 'true' }}
        with:
          version: ${{ steps.original.outputs.result }}
          return_with_suffix: false
          return_with_prefix: false
          method: ${{ github.event.inputs.bump }}

      - name: Bump up NodeJS Version and Push to git
        if: ${{ env.VERSIONING_NODEJS_PACKAGE_JSON == 'true' }}
        run: |
          if [[ ! -z "${{ github.event.inputs.module }}" ]]; then
            cd ${{ github.event.inputs.module }}
          fi
          npm version ${{ steps.version-node.outputs.version }} --no-git-tag-version
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_MAIL }}"
          git add package.json
          git commit -m ":bookmark: Update package.json version"
          git push origin main

      - name: Tag Push
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_MAIL }}"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

