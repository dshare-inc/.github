name: '⏫ Publish'

on:
  push:
    tags:
      - '*-*.*.*'
      - '*-*.*.*-*'
      - '*.*.*-*'
      - '*.*.*'

concurrency:
  group: publish-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

env:
  # AWS Configurations
  #
  AWS_REGION: ${{ secrets.AWS_ECR_REGION }}
  AWS_CODEARTIFACT_REGION: ${{ secrets.AWS_CODEARTIFACT_REGION }}
  AWS_CODEARTIFACT_DOMAIN: ${{ secrets.AWS_CODEARTIFACT_DOMAIN }}
  AWS_CODEARTIFACT_OWNER: ${{ secrets.AWS_CODEARTIFACT_OWNER }}
  AWS_CODEARTIFACT_NPM_REPO: npmjs
  AWS_SESSION_DURATION: ${{ secrets.AWS_ROLE_SESSION_DURATION }}
  AWS_CODE_MANAGER_ROLE: ${{ secrets.AWS_CODE_MANAGER_ROLE }}

  # JDK, Node.js versions
  #
  JDK_VERSION: '11.0'
  NODE_VERSION: 14

  # Optional (java or nodejs)
  TYPE: ''

  # Create Release
  CREATE_RELEASE: 'true'

jobs:
  Extract:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.result }}
      tag_module: ${{ steps.module.outputs.result }}
    steps:
      - name: Extract Tag
        id: tag_original
        uses: actions/github-script@v5
        if: ${{ always() }}
        with:
          github-token: ${{ github.token }}
          script: |
            if (context.payload.ref === undefined || context.payload.ref === null || context.payload.ref.match(/refs\/tags\//) === null) {
              return '';
            }
            return context.payload.ref.replace(/refs\/tags\/(?:([A-z0-9-_]+)-|)([0-9]+\.[0-9]+\.[0-9]+)$/, '$2');

      - name: Extract Tag Replace Quote
        id: tag
        run: |
          ITEM=`echo "${{ steps.tag_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$ITEM"

      - name: Extract Module from Tag
        id: module_original
        uses: actions/github-script@v5
        if: ${{ always() }}
        with:
          github-token: ${{ github.token }}
          script: |
            if (context.payload.ref === undefined || context.payload.ref === null || context.payload.ref.match(/refs\/tags\//) === null) {
              return '';
            }

            return context.payload.ref.replace(/refs\/tags\/(?:([A-z0-9-_]+)-|)[0-9]+\.[0-9]+\.[0-9]+$/, '$1');

      - name: Extract Module from Tag Replace Quote
        id: module
        run: |
          ITEM=`echo "${{ steps.module_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$ITEM"

      - name: Check Results
        env:
          tag: ${{ steps.tag.outputs.result }}
          tag_module: ${{ steps.module.outputs.result }}
        run: |
          echo $tag
          echo $tag_module

  Validate:
    name: Publishable
    needs: [ Extract ]
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.find.outputs.type }}
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Check(Find) types
        id: find
        run: |
          if [[ -z "${{ env.TYPE }}" ]]; then

            # 타입이 없다면 자동으로 추론한다.
            # 모듈이 있다면 해당 경로, 아니라면 Root 에서 탐색한다.
            # package.json 이 있다면 node.js 모듈로, build.gradle 이 있다면 JDK 모듈로 판단
            FIND_PATH="${{ needs.Extract.outputs.tag_module }}"
            if [[ ! -z "$FIND_PATH" ]]; then
              FIND_PATH="$FIND_PATH/"
            fi
            if [[ -f "${FIND_PATH}package.json" ]]; then
              echo "::set-output name=type::nodejs"
              exit 0
            fi

            if [[ -f "${FIND_PATH}build.gradle" ]]; then
              echo "::set-output name=type::java"
              exit 0
            fi

            exit 1
          fi

          exit 0

  Java:
    name: Publish Java Library
    timeout-minutes: 20
    needs: [ Validate, Extract ]
    runs-on: actions-runner-system
    if: ${{ needs.Validate.outputs.type == 'java' }}
    env:
      TAG_NUMBER: ${{ needs.Extract.outputs.tag }}
      TAG_MODULE_NAME: ${{ needs.Extract.outputs.tag_module }}
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_CODE_MANAGER_ROLE }}
          role-duration-seconds: ${{ env.AWS_SESSION_DURATION }}

      - name: AWS CodeArtifact Authentication (Gradle)
        uses: dshare-inc/actions-codeartifact-auth@1.0.1
        with:
          region: ${{ env.AWS_CODEARTIFACT_REGION }}
          domain: ${{ env.AWS_CODEARTIFACT_DOMAIN }}
          owner: ${{ env.AWS_CODEARTIFACT_OWNER }}
          type: gradle
          repo: gradle

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
          architecture: x64

      - name: Cache (Gradle)
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Go to module
        if: ${{ env.TAG_MODULE_NAME != '' }}
        run: |
          cd ${{ env.TAG_MODULE_NAME }}

      - name: Clean
        run: PROJECT_VERSION="${{ env.TAG_NUMBER }}" ./gradlew clean -Dconsole.encoding=UTF-8 -Dfile.encoding=UTF-8 --no-daemon --parallel

      - name: Build
        run: PROJECT_VERSION="${{ env.TAG_NUMBER }}" ./gradlew build -Dconsole.encoding=UTF-8 -Dfile.encoding=UTF-8 --no-daemon --parallel --build-cache

      - name: Publish
        run: PROJECT_VERSION="${{ env.TAG_NUMBER }}" ./gradlew publish

  NodeJS:
    name: Publish Javascript(Node.js) Library
    timeout-minutes: 20
    needs: [ Validate, Extract ]
    runs-on: actions-runner-system
    if: ${{ needs.Validate.outputs.type == 'nodejs' }}
    env:
      TAG_NUMBER: ${{ needs.Extract.outputs.tag }}
      TAG_MODULE_NAME: ${{ needs.Extract.outputs.tag_module }}
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_CODE_MANAGER_ROLE }}
          role-duration-seconds: ${{ env.AWS_SESSION_DURATION }}

      - name: AWS CodeArtifact Authentication (NPM)
        uses: dshare-inc/actions-codeartifact-auth@1.0.1
        with:
          region: ${{ env.AWS_CODEARTIFACT_REGION }}
          domain: ${{ env.AWS_CODEARTIFACT_DOMAIN }}
          owner: ${{ env.AWS_CODEARTIFACT_OWNER }}
          type: npm
          repo: ${{ env.AWS_CODEARTIFACT_NPM_REPO }}

      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache (Node.js)
        uses: actions/cache@v2
        id: node-cache
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Go to module
        if: ${{ env.TAG_MODULE_NAME != '' }}
        run: |
          cd ${{ env.TAG_MODULE_NAME }}

      - name: Install Dependencies
        # if: steps.node-cache.outputs.cache-hit != 'true'
        run: |
          yarn install

      - name: Build
        run: |
          yarn rollup

      - name: Publish
        run: |
          yarn publish

  ReleaseJava:
    name: Create github release note for java
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [ Java ]
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          body: "Released"

  ReleaseNode:
    name: Create github release note for Node.js
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [ NodeJS ]
    steps:
      - name: Checkout VCS
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          body: "Released"
