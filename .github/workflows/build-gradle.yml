name: 'ðŸ’¾ Build (Gradle)'
# https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
on:
  workflow_dispatch:
    module:
  workflow_call:
    inputs:
      type:
        type: string
      command:
        type: string
        description: 'Build command'
        required: true
        default: |
          build -x test -x spotlessCheck

concurrency:
  group: build-${{ github.repository }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  extract:
    name: 'Extract the module and version from the tag or pr labels'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.result }}
      tag_module: ${{ steps.module.outputs.result }}
      pr_module: ${{ steps.pr_module.outputs.result }}
      pull_request: ${{ steps.pull_request.outputs.result }}
    steps:
      - name: Extract Git Event
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Extract Tag
        id: tag_original
        uses: actions/github-script@0.2.0
        if: ${{ always() }}
        with:
          github-token: ${{ env.GIT_TOKEN }}
          script: |
            if (context.payload.ref === undefined || context.payload.ref === null || context.payload.ref.match(/refs\/tags\//) === null) {
              return null;
            }
            return context.payload.ref.replace(/refs\/tags\/([A-z0-9-_]+)-([0-9]+\.[0-9]+\.[0-9]+)$/, '$2');

      - name: Extract Tag Replace Quote
        id: tag
        run: |
          ITEM=`echo "${{ steps.tag_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$ITEM"

      - name: Extract PR Label Module
        id: pr_module_original
        uses: actions/github-script@0.2.0
        if: ${{ always() }}
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels) }}
          EVENT: ${{ github.event.action }}
          EVENT_NAME: ${{ github.event_name }}
          LABEL_NAME: ${{ github.event.label.name }}
        with:
          github-token: ${{ env.GIT_TOKEN }}
          script: |
            if (process.env.EVENT_NAME == 'push') {
              return null;
            }
            if (process.env.EVENT == 'unlabeled' && process.env.LABEL_NAME.match(/^deploy-(.*?) ðŸš€$/)) {
              return process.env.LABEL_NAME.match(/^deploy-(.*?) ðŸš€$/)[1];
            }
            try {
              const labels = JSON.parse(process.env.LABELS).map(l => l.name);
              if (labels.filter(l => l.match(/^deploy-(.*?) ðŸš€$/)).length < 1) {
                return null;
              }
              const deploy = labels
                .filter(l => l.match(/^deploy-(.*?) ðŸš€$/))[0]
                .match(/^deploy-(.*?) ðŸš€$/);
              return deploy[1];
            } catch (e) {
              console.error(e);
              return null;
            }

      - name: Extract PR Label Module Replace Quote
        id: pr_module
        run: |
          PR_MODULE=`echo "${{ steps.pr_module_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$PR_MODULE"

      - name: Extract Module from Tag
        id: module_original
        uses: actions/github-script@0.2.0
        if: ${{ always() }}
        with:
          github-token: ${{ env.GIT_TOKEN }}
          script: |
            if (context.payload.ref === undefined || context.payload.ref === null || context.payload.ref.match(/refs\/tags\//) === null) {
              return null;
            }
            return context.payload.ref.replace(/refs\/tags\/([A-z0-9-_]+)-[0-9]+\.[0-9]+\.[0-9]+$/, '$1');
      - name: Extract Module from Tag Replace Quote
        id: module
        run: |
          ITEM=`echo "${{ steps.module_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$ITEM"

      - name: Extract PR Number
        id: pull_request_original
        uses: actions/github-script@0.2.0
        if: ${{ always() }}
        with:
          github-token: ${{ env.GIT_TOKEN }}
          script: |
            if (context.issue === undefined || context.issue === null || context.issue.number === undefined || context.issue.number === null) {
              return null;
            }
            return context.issue.number;

      - name: Extract PR Number Replace Quote
        id: pull_request
        run: |
          ITEM=`echo "${{ steps.pull_request_original.outputs.result }}" | sed -e 's/^"//' -e 's/"$//'`
          echo "::set-output name=result::$ITEM"

      - name: Check Results
        env:
          tag: ${{ steps.tag.outputs.result }}
          tag_module: ${{ steps.module.outputs.result }}
          pr_module: ${{ steps.pr_module.outputs.result }}
          pull_request: ${{ steps.pull_request.outputs.result }}
        run: |
          echo $tag
          echo $tag_module
          echo $pr_module
          echo $pull_request


  build:
    name:
    runs-on: actions-runner
    strategy:
      matrix:
    steps:
      - name: Checkout Pull Request VCS
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          token: ${{ github.token }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Checkout VCS (Non PR)
        uses: actions/checkout@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          token: ${{ github.token }}
          ref: ${{ github.ref }}

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          architecture: x64
          cache: gradle

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: AWS AssumeRole (Auth)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_ROLE_REGION }}
          role-to-assume: ${{ secrets.AWS_CODE_MANAGER_ROLE }}
          role-duration-seconds: ${{ secrets.AWS_ROLE_SESSION_DURATION }}

      - name: AWS CodeArtifact Authentication (Gradle)
        uses: dshare-inc/actions-codeartifact-auth@1.0.1
        with:
          region: ${{ secrets.AWS_CODEARTIFACT_REGION }}
          domain: ${{ secrets.AWS_CODEARTIFACT_DOMAIN }}
          owner: ${{ secrets.AWS_CODEARTIFACT_OWNER }}
          type: gradle
          repo: gradle

      - name: Clean
        if: ${{ inputs.clean_build == 'true' }}
        id: clean
        run: |
          ./gradlew --console verbose clean -Dconsole.encoding=UTF-8 -Dfile.encoding=UTF-8 --no-daemon --parallel

      - name: Build an application
        id: build
        run: |
          ./gradlew --console verbose ${{ matrix.gradle.build }} -Dconsole.encoding=UTF-8 -Dfile.encoding=UTF-8 --no-daemon --parallel

      - name: Build a docker image
        id: docker
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: user/app:latest
          context: .

  notify:
    runs-on: ubuntu-latest

